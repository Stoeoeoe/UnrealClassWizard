<?xml version="1.0"?>
<Page xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
      xmlns:xctk="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
      xmlns:editor="http://icsharpcode.net/sharpdevelop/avalonedit"
      xmlns:view="clr-namespace:Unreal_Class_Wizard.View"
      xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
      xmlns:vm="clr-namespace:Unreal_Class_Wizard.ViewModel"
      xmlns:CustomControls="clr-namespace:Unreal_Class_Wizard.CustomControls"
      x:Class="Unreal_Class_Wizard.View.ClassInformationView"
      mc:Ignorable="d"
      d:DataContext="{d:DesignInstance IsDesignTimeCreatable=True}"
      d:DesignHeight="1024" d:DesignWidth="1280"
      x:Name="metaInformation">
    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Unreal Class Wizard;component/Resources/UE4Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <Style BasedOn="{StaticResource LabelStyle}" TargetType="{x:Type Label}"/>
            
            <!--<Style BasedOn="{StaticResource TextBoxStyle}" TargetType="{x:Type TextBox}"/>-->
            <Style BasedOn="{StaticResource TextBoxStyle}" TargetType="{x:Type xctk:WatermarkTextBox}"/>
            
            <Style BasedOn="{StaticResource CheckBoxStyle}" TargetType="{x:Type CheckBox}"/>
            <Style BasedOn="{StaticResource ButtonStyle}" TargetType="{x:Type Button}"/>
            <Style BasedOn="{StaticResource TabItemStyle}" TargetType="{x:Type TabItem}"/>
            <Style BasedOn="{StaticResource ComboBoxStyle}" TargetType="{x:Type ComboBox}"/>
        </ResourceDictionary>
    </Page.Resources>
    <Grid x:Name="baseGrid">
        <Grid.RowDefinitions>
            <RowDefinition Height="45"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="20"/>
            <ColumnDefinition Width="1*"/>
            <ColumnDefinition Width="1.5*"/>
        </Grid.ColumnDefinitions>
        <GridSplitter Grid.Row="0" Grid.RowSpan="4" Grid.Column="1" Width="5" BorderThickness="1,0" Background="#FFB0B0B0"/>
        <Label Content="CLASS INFORMATION" Style="{StaticResource TitleStyle}" Grid.Column="1" HorizontalAlignment="Stretch" VerticalAlignment="Center" Grid.Row="0" Grid.ColumnSpan="2" Margin="4,0,6,8"/>
        <Label Content="PREVIEW" Style="{StaticResource TitleStyle}" Grid.Column="2" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="0" Margin="3,0,0,0"/>
        <StackPanel Grid.Row="1" Grid.Column="1" Margin="10" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Orientation="Vertical">

            <!-- Main Group -->
            <CustomControls:GroupControl Title="Main">
                <CustomControls:GroupControl.Labels>
                    <Label>Name</Label>
                    <Label>Base class</Label>
                    <Label>Access modifier</Label>
                    <Label>Is Actor/spawnable?</Label>
                    <Label>Included classes</Label>
                </CustomControls:GroupControl.Labels>
                <CustomControls:GroupControl.Fields>
                    <xctk:WatermarkTextBox Watermark="Example: 'MyActor'" Text="{Binding ClassName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Determines the name of the class (without prefix)" TabIndex="0" Height="22"/>
                    <ComboBox IsEditable="True" ItemsSource="{Binding BaseClasses}" Text="{Binding CurrentBaseClassText, NotifyOnSourceUpdated=True}" SelectedIndex="{Binding CurrentBaseClassIndex}" ToolTip="Class from which to inherit, usually not empty" TabIndex="1" Height="22" Template="{DynamicResource ComboBoxControlTemplate1}"/>
                    <ComboBox Text="{Binding Access, Mode=TwoWay}" ToolTip="Determines whether a class is public or private" TabIndex="2" Height="22" Template="{DynamicResource NonEditableComboboxStyle}">
                        <ComboBoxItem Content="Public"/>
                        <ComboBoxItem Content="Private"/>
                    </ComboBox>
                    <CheckBox IsChecked="{Binding IsActor, Mode=TwoWay}" VerticalAlignment="Center" ToolTip="Determines the prefix of the class, A for spawnable objects, U for others" TabIndex="3"/>
                    <xctk:WatermarkTextBox VerticalAlignment="Center" Watermark="Seperate with semicolon" Text="{Binding AdditionalIncludedClasses, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" ToolTip="Other classes which will be included in the header" TabIndex="4"/>
                </CustomControls:GroupControl.Fields>
            </CustomControls:GroupControl>

            <!-- Class Specifier Group -->
            <CustomControls:GroupControl Title="Class Specifiers" Margin="0,15,0,0">
                <CustomControls:GroupControl.Labels>
                    <Label>Is abstract?</Label>
                    <Label>Is blueprintable?</Label>
                    <Label>Class Specifiers</Label>
                </CustomControls:GroupControl.Labels>
                <CustomControls:GroupControl.Fields>
                    <CheckBox IsChecked="{Binding IsAbstract, Mode=TwoWay}" VerticalAlignment="Center" ToolTip="Determines whether the class is abstract and thus cannot be instantiated" TabIndex="5"/>
                    <CheckBox IsChecked="{Binding IsBlueprintable, Mode=TwoWay}" VerticalAlignment="Center" ToolTip="Determines whether the class will show up as a possible base class when creating a new blueprint" TabIndex="6"/>
                    <Button Content="More..." HorizontalAlignment="Left" Width="100" ToolTip="Management of all class specifiers" Click="otherClassSpecifiersButton_Click" Height="22" TabIndex="7"/>
                </CustomControls:GroupControl.Fields>
            </CustomControls:GroupControl>

            <!-- API Group -->
            <CustomControls:GroupControl Title="API" Margin="0,15,0,0">
                <CustomControls:GroupControl.Labels>
                    <Label>Add module API?</Label>
                    <Label>API</Label>
                </CustomControls:GroupControl.Labels>
                <CustomControls:GroupControl.Fields>
                    <CheckBox IsChecked="{Binding UseAPI, Mode=TwoWay}" VerticalAlignment="Center" ToolTip="Use Module API to expose this class to the game's DLL file" TabIndex="8"/>
                    <xctk:WatermarkTextBox Watermark="The API, e.g. MyProject_API" Text="{Binding API, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" HorizontalAlignment="Stretch" VerticalAlignment="Center" ToolTip="The game's API to be exposed" Visibility="Visible" IsEnabled="{Binding UseAPI}" TabIndex="9" Height="22"/>
                </CustomControls:GroupControl.Fields>
            </CustomControls:GroupControl>


            <CustomControls:GroupControl  Title="Description" Margin="0,15,0,0" LineHeight="150">
                <CustomControls:GroupControl.Labels>
                    <Label>Description</Label>
                </CustomControls:GroupControl.Labels>
                <CustomControls:GroupControl.Fields>
                    <xctk:WatermarkTextBox HorizontalAlignment="Stretch"
                                           VerticalAlignment="Stretch"
                                           SpellCheck.IsEnabled="True"
                                           Text="{Binding Description, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                           AcceptsReturn="True"
                                           TextWrapping="Wrap"
                                           VerticalScrollBarVisibility="Disabled"
                                           TabIndex="10" ToolTip="Description/documentation of this class" Margin="0,15,0,15"
                                           />
                </CustomControls:GroupControl.Fields>
            </CustomControls:GroupControl>

        </StackPanel>


        <TabControl Grid.Column="2" HorizontalAlignment="Stretch" Margin="10,10,15,10" VerticalAlignment="Stretch" Grid.Row="1">
            <TabItem Header="Header File">
                <view:UE4AvalonEdit x:Name="editorHeader" Grid.Row="2" Grid.Column="4" IsReadOnly="True" SyntaxHighlighting="C++" Grid.RowSpan="8">
                    <i:Interaction.Behaviors>
                        <view:AvalonEditBehavior BoundText="{Binding PreviewHeader, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>
                </view:UE4AvalonEdit>
            </TabItem>
            <TabItem Header="C++ File">
                <view:UE4AvalonEdit x:Name="editorCPP" Grid.Row="2" Grid.Column="4" IsReadOnly="True" SyntaxHighlighting="C++" Grid.RowSpan="8">
                    <i:Interaction.Behaviors>
                        <view:AvalonEditBehavior BoundText="{Binding PreviewCPP, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"/>
                    </i:Interaction.Behaviors>
                </view:UE4AvalonEdit>
            </TabItem>
        </TabControl>
    </Grid>
</Page>
